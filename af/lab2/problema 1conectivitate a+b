from _collections import deque
from math import fabs
with open("graf.txt") as fisier:
    matrice = []
    n, m = [int(z) for z in fisier.readline().split()]
    for i in range(m):
        linie = list(map(int, fisier.readline().split()))
        matrice.append(linie)
print(matrice)


def lista_adiacenta(orientat=0, nume_fisier="graf.txt"):
    n = 0
    with open("graf.txt") as fisier:
        linie = fisier.readline()
        n, m = [int(z) for z in linie.split()]
        a = [[] for i in range(n + 1)]
        for linie in fisier:
            x, y = [int(z) for z in linie.split()]
            a[x].append(y)
            if not orientat:
                a[y].append(x)
    return a


b = lista_adiacenta(0)
b.remove([])

viz = deque()
cur = deque()
cur.append([1, 1])
nivel = 0
rezolvat = 0


def dfs(cur, viz, nivel=1, muchii=lista_adiacenta(0)):
    if cur[len(cur) - 1][0] not in [viz1[0] for viz1 in viz]:
        viz.append(cur[len(cur) - 1])

    for x in muchii[cur[len(cur) - 1][0]]:
        if x not in [z[0] for z in viz]:
            cur.append([x, nivel + 1])
            dfs(cur, viz, nivel + 1)
        elif x in [z[0] for z in viz] and x != cur[len(cur) - 1][0] and x != cur[len(cur) - 2][0] and len(cur) > 2:
            y = 999
            for i in cur:
                if i[0] == x:
                    y = i[1]
                if (y != 999):
                    viz[viz.index(i)][1] = y
            else:
                pass

    cur.pop()
    return viz


def muchii_critice(viz1,lista_nivele, cur, muchii=lista_adiacenta(0)):
        for x in muchii[cur[0]]:
            if x not in viz1:
                c = [cur1 for cur1 in lista_nivele if cur1[0] == x]
                c=c[0]
               # print(c[0])
                if fabs(cur[1] - lista_nivele[lista_nivele.index(c)][1]) >= 1: #pentru exercitiul 1 a va fi doar > in loc de >=
                   # print(cur[0],lista_nivele[lista_nivele.index(c)][0])
                    #print("aoleu")
                    solutie.append(cur[0])
                    if fabs(cur[1] - lista_nivele[lista_nivele.index(c)][1]) > 1 and len(muchii[lista_nivele[lista_nivele.index(c)][0]])>1:
                         solutie.append(lista_nivele[lista_nivele.index(c)][0])
                b=[cur1 for cur1 in lista_nivele if cur1[0] == x]
                #print(b[0])
                viz1.append(x)

                muchii_critice(viz1,lista_nivele,
                              b[0], muchii)

        return set(solutie) #pentru 1 b, ca sa fie 1 a dam doar return
#muchii critice face dfs pentru si verifica daca intre nodul curent si vecinii sai este diferenta mai mare de 1 nivel iar in caz
#afirmativ va afisa muchia
viz1=[1]
lista_nivele = dfs(cur, viz)
solutie=[]
print(lista_nivele)
print(muchii_critice(viz1,lista_nivele, lista_nivele[0]))

"""
10 13
1 5
1 10
3 5
5 6
5 9
5 10
3 6
3 7
6 7
2 4
2 6
2 8
4 8 """
